--- openjdk-jdk-10.0.1+10/src/hotspot/os/linux/os_linux.cpp	2017-10-05 15:07:19.439537105 +1100
+++ openjdk-jdk-10.0.1+10/src/hotspot/os/linux/os_linux.cpp	2017-10-05 15:07:48.567938773 +1100
@@ -4939,45 +4939,8 @@
   int configured_cpus = processor_count();  // upper bound on available cpus
   int cpu_count = 0;
 
-// old build platforms may not support dynamic cpu sets
-#ifdef CPU_ALLOC
-
-  // To enable easy testing of the dynamic path on different platforms we
-  // introduce a diagnostic flag: UseCpuAllocPath
-  if (configured_cpus >= CPU_SETSIZE || UseCpuAllocPath) {
-    // kernel may use a mask bigger than cpu_set_t
-    log_trace(os)("active_processor_count: using dynamic path %s"
-                  "- configured processors: %d",
-                  UseCpuAllocPath ? "(forced) " : "",
-                  configured_cpus);
-    cpus_p = CPU_ALLOC(configured_cpus);
-    if (cpus_p != NULL) {
-      cpus_size = CPU_ALLOC_SIZE(configured_cpus);
-      // zero it just to be safe
-      CPU_ZERO_S(cpus_size, cpus_p);
-    }
-    else {
-       // failed to allocate so fallback to online cpus
-       int online_cpus = ::sysconf(_SC_NPROCESSORS_ONLN);
-       log_trace(os)("active_processor_count: "
-                     "CPU_ALLOC failed (%s) - using "
-                     "online processor count: %d",
-                     os::strerror(errno), online_cpus);
-       return online_cpus;
-    }
-  }
-  else {
-    log_trace(os)("active_processor_count: using static path - configured processors: %d",
-                  configured_cpus);
-  }
-#else // CPU_ALLOC
-// these stubs won't be executed
-#define CPU_COUNT_S(size, cpus) -1
-#define CPU_FREE(cpus)
-
   log_trace(os)("active_processor_count: only static path available - configured processors: %d",
                 configured_cpus);
-#endif // CPU_ALLOC
 
   // pid 0 means the current thread - which we have to assume represents the process
   if (sched_getaffinity(0, cpus_size, cpus_p) == 0) {
